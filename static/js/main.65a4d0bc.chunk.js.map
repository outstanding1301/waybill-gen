{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","React","useState","waybills","setWaybills","addWaybill","i","filter","e","주문번호","수취인전화번호","length","download","ws","xlsx","utils","json_to_sheet","wb","book_new","book_append_sheet","writeFile","className","onDragEnter","event","preventDefault","onDragLeave","onDragOver","onDrop","files","dataTransfer","file","console","log","type","reader","FileReader","onload","a","bstr","target","result","read","wsname","SheetNames","Sheets","data","sheet_to_json","header","row","waybill","수취인이름","배송메세지","판매자","집배장소","readAsBinaryString","window","scrollTo","onClick","map","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.65a4d0bc.chunk.js","sourcesContent":["import React from 'react';\nimport xlsx from 'xlsx';\nimport './App.css';\n\nfunction App() {\n\n  const [waybills, setWaybills] = React.useState([]);\n\n  const onDragEnter = (event) => {\n    event.preventDefault();\n  }\n\n  const onDragLeave = (event) => {\n    event.preventDefault();\n  }\n\n  const onDragOver = (event) => {\n    event.preventDefault();\n  }\n\n  const addWaybill = (i) => {\n    if(waybills.filter(e => e.주문번호 == i.주문번호 && e.수취인전화번호 == i.수취인전화번호 && e['노출상품명(옵션명)'] == i['노출상품명(옵션명)']).length == 0)\n    setWaybills(e => [...e, i]);\n  }\n\n  const onDropXlsx = (event) => {\n    const supportedFilesTypes = ['application/vnd.ms-excel', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'];\n    const files = event.dataTransfer.files;\n    for (let i=0;i<files.length;i++) {\n      const file = files[i];\n      console.log(`${file.type}`);\n      // if(supportedFilesTypes.indexOf(file.type) > -1) {\n        const reader = new FileReader();\n        reader.onload = async e => {\n          const bstr = e.target.result;\n          const wb = xlsx.read(bstr, {type: 'binary'});\n          const wsname = wb.SheetNames[0];\n          const ws = wb.Sheets[wsname];\n          const data = xlsx.utils.sheet_to_json(ws, {header: 1});\n          if(data[0].length == 40) { // 쿠팡\n            console.log('쿠팡');\n            for(let i=1;i<data.length;i++) {\n              const row = data[i];\n              const waybill = {\n                수취인이름: row[27],\n                수취인전화번호: row[28],\n                '수취인 주소': row[30],\n                주문번호: row[2],\n                '노출상품명(옵션명)': row[12],\n                '구매수(수량)': row[22],\n                배송메세지: row[31],\n                판매자: '오렌지다몸(쿠팡)',\n                '판매자 전화번호': '010-2441-4655',\n                집배장소: '인천 서구 원당동 cj대한통운원당탑집배점'\n              }\n              console.log(waybill);\n              addWaybill(waybill);\n            }\n          }\n          else if (data[0].length == 48) { // ESM\n            console.log('ESM');\n            for(let i=1;i<data.length;i++) {\n              const row = data[i];\n              const waybill = {\n                수취인이름: row[3],\n                수취인전화번호: row[20] || row[21],\n                '수취인 주소': row[23],\n                주문번호: row[2],\n                '노출상품명(옵션명)': `${row[11]} (${row[13]})`,\n                '구매수(수량)': row[12],\n                배송메세지: row[24],\n                판매자: '오렌지다몸(쿠팡)',\n                '판매자 전화번호': '010-2441-4655',\n                집배장소: '인천 서구 원당동 cj대한통운원당탑집배점'\n              }\n              console.log(waybill);\n              addWaybill(waybill);\n            }\n          }\n        }\n        reader.readAsBinaryString(file);\n      // }\n    }\n    window.scrollTo(0,0);\n    event.preventDefault();\n  }\n\n  const getText = () => {\n    if(waybills.length > 0) {\n      return '파일을 추가하거나, 다운로드 버튼을 클릭하세요.';\n    }\n    else {\n      return '이 곳에 파일을 올려놓으세요.';\n    }\n  }\n\n  const getDownloadBtn = () => {\n    if(waybills.length > 0) {\n      return <button className=\"download\" onClick={download}>다운로드</button>\n    }\n    else {\n      return undefined;\n    }\n  }\n\n  const download = () => {\n    const ws = xlsx.utils.json_to_sheet(waybills);\n    const wb = xlsx.utils.book_new();\n    xlsx.utils.book_append_sheet(wb, ws, '배송관리');\n    const file = xlsx.writeFile(wb, 'cnplus.xlsx');\n  }\n\n  return (\n      <div className=\"App\">\n        <div className=\"dropHere\"\n        onDragEnter={onDragEnter}\n        onDragLeave={onDragLeave}\n        onDragOver={onDragOver}\n        onDrop={onDropXlsx}>\n          {getText()}\n          {getDownloadBtn()}\n        </div>\n        <div className=\"waybillList\">\n        <h1 className=\"waybillCnt\">운송장 수 : {waybills.length}</h1>\n        {waybills.map((e,i) => {\n          return <p className=\"waybill\">{i+1}. {e.수취인이름}, {e['노출상품명(옵션명)']}</p>\n        })}\n        </div>\n        <div className=\"background\"></div>\n      </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}